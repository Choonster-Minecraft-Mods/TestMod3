package choonster.testmod3.world.level.storage.loot.predicates;

import choonster.testmod3.init.ModLootConditionTypes;
import com.mojang.serialization.Codec;
import net.minecraft.world.level.storage.loot.LootContext;
import net.minecraft.world.level.storage.loot.parameters.LootContextParams;
import net.minecraft.world.level.storage.loot.predicates.LootItemCondition;
import net.minecraft.world.level.storage.loot.predicates.LootItemConditionType;

/**
 * A condition that makes a best-effort attempt to determine if the loot is being generated by a chest.
 *
 * @author Choonster
 */
public class IsChestLoot implements LootItemCondition {
	private static final IsChestLoot INSTANCE = new IsChestLoot();

	public static final Codec<IsChestLoot> CODEC = Codec.unit(INSTANCE);

	private IsChestLoot() {
	}

	@Override
	public LootItemConditionType getType() {
		return ModLootConditionTypes.IS_CHEST_LOOT.get();
	}

	@Override
	public boolean test(final LootContext lootContext) {
		// BlockEntityLockableLoot#fillWithLoot always provides the ORIGIN parameter, sometimes provides THIS_ENTITY and
		// never provides any other parameter.

		return lootContext.hasParam(LootContextParams.ORIGIN) &&
				!lootContext.hasParam(LootContextParams.DAMAGE_SOURCE) &&
				!lootContext.hasParam(LootContextParams.KILLER_ENTITY) &&
				!lootContext.hasParam(LootContextParams.DIRECT_KILLER_ENTITY) &&
				!lootContext.hasParam(LootContextParams.BLOCK_STATE) &&
				!lootContext.hasParam(LootContextParams.BLOCK_ENTITY) &&
				!lootContext.hasParam(LootContextParams.TOOL) &&
				!lootContext.hasParam(LootContextParams.EXPLOSION_RADIUS);
	}

	public static LootItemCondition.Builder builder() {
		return () -> INSTANCE;
	}
}
